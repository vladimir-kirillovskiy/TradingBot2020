from visualization.candlestick import get_last_ATR, get_dataframe, get_last_price
import alpaca_trade_api as tradeapi
from stop_loss import stop_loss_buy, stop_loss_sell
# аргументом функции является название акции


def risk(action, stock):
    if action == 'Buy':
        return risk_buy(stock)
    elif action == 'Sell' :
        return risk_sell(stock)
    elif action == 'Skip' :
        pass
     else :
        return 'error, action must be buy or sell'
        
def delete_all_positions():
    api.close_all_positions()
        
def risk_buy(stock):
    account = api.get_account()
    money_on_account = account.last_equity
    df, time = get_dataframe(stock, 100)
    atr = get_last_ATR(df)
    price = get_last_price(df, 'c')
    percent_risk = 0.05
    price_pos = 0
    general_risk = 0
    positions = api.list_orders()
    for i in range len(positions):
        price_pos = positions[i].avg_entry_price
        stop_for_this_stock = stop_loss_buy(positions[i])
        risk = price_pos - stop_for_this_stock
        general_risk += risk
    if general_risk <= money_on_account * percent_risk:
        stop = price - 2 * atr
        onePercentFromTotal = money_on_account * 0.01
        return stop, onePercentFromTotal / (2 * atr) 
      


def risk_sell(stock):
    account = api.get_account()
    money_on_account = account.last_equity
    df, time = get_dataframe(stock, 100)
    atr = get_last_ATR(df)
    price = get_last_price(df, 'c')
    percent_risk = 0.05
    price_pos = 0
    general_risk = 0
    positions = api.list_orders()
    for i in range len(positions):
        price_pos = positions[i].avg_entry_price
        stop_for_this_stock = stop_loss_sell(positions[i])
        risk = price_pos - stop_for_this_stock
        general_risk += risk
    if general_risk <= money_on_account * percent_risk:
        stop = price + 2 * atr
        onePercentFromTotal = money_on_account * 0.01
        return stop, onePercentFromTotal / (2 * atr) 
        
def risk_buy_alternative(stock):
    account = api.get_account()
    money_on_account = account.last_equity
    df, time = get_dataframe(stock, 100)
    atr = get_last_ATR(df)
    price = get_last_price(df, 'c')
    percent_risk = 0.05
    money_on_account_start = 100000
    ppos = money_on_account_start - money_on_account
    stop = price - 2 * atr
    risk = ppos - stop
    if risk <= money_on_account*percent_risk:
        onePercentFromTotal = money_on_account*0.01
        return stop, onePercentFromTotal / (2*atr)    #сколько акций мы можем себе позволить, учитывая стоп лосс
      


def risk_sell_alternative(stock):
    account = api.get_account()
    money_on_account = account.last_equity
    df, time = get_dataframe(stock, 100)
    atr = get_last_ATR(df)
    price = get_last_price(df, 'c')
    stop = price + 2 * atr
    risk = price - stop
    percent_risk = 0.05
    money_on_account_start = 100000
    ppos = money_on_account_start - money_on_account
    p = price + 2 * atr
    risk = ppos - stop
    if risk <= money_on_account*percent_risk:
        onePercentFromTotal = money_on_account*0.01
        return stop, onePercentFromTotal / (2*atr)    #сколько акций мы можем себе позволить, учитывая стоп лосс        
